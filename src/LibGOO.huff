/* Imports */
#include "./utils/WadMath.huff"


/* Interface */
#define function computeGooBalance(uint256,uint256,uint256) nonpayable returns (uint256)

/* Methods */
#define macro COMPUTE_GOO_BALANCE() = takes (0) returns (0) {
    0x04 calldataload           // [emissionMultiple]
    0x24 calldataload           // [lastBalanceWad,emissionMultiple]  
    0x44 calldataload           // [timeElapsedWad,lastBalanceWad,emissionMultiple]  

     dup1                       // [timeElapsedWad,timeElapsedWad,lastBalanceWad,emissionMultiple]   
     dup1                       // [timeElapsedWad,timeElapsedWad,timeElapsedWad,lastBalanceWad,emissionMultiple]   
     WAD_MUL()                  // [timeElapsedWad * timeElapsedWad,timeElapsedWad,lastBalanceWad,emissionMultiple]   
     
     dup4                       // [emissionMultiple, timeElapsedWad * timeElapsedWad,timeElapsedWad,lastBalanceWad,emissionMultiple]
     mul                        // [emissionMultiple * timeElapsedWadSquared,timeElapsedWad,lastBalanceWad,emissionMultiple]  
     0x02 shr                   // [emissionMultiple * timeElapsedWadSquared >> 2,timeElapsedWad, lastBalanceWad,emissionMultiple]    
     dup3                       // [lastBalanceWad, emissionMultiple * timeElapsedWadSquared >> 2,timeElapsedWad,lastBalanceWad,emissionMultiple]
     add                        // [lastBalanceWad + (emissionMultiple * timeElapsedWadSquared >> 2),timeElapsedWad,lastBalanceWad,emissionMultiple]        
     0x00 mstore                // [timeElapsedWad,lastBalanceWad,emissionMultiple]  
     
     dup2                       // [lastBalanceWad, timeElapsedWad,lastBalanceWad,emissionMultiple]  
     dup4                       // [emissionMultiple, lastBalanceWad, timeElapsedWad,lastBalanceWad,emissionMultiple]            
     mul                        // [emissionMultiple * lastBalanceWad, timeElapsedWad,lastBalanceWad,emissionMultiple]     
     [WAD]                      // [1e18, emissionMultiple * lastBalanceWad, timeElapsedWad,lastBalanceWad,emissionMultiple]     
     mul                        // [1e18 * emissionMultiple * lastBalanceWad, timeElapsedWad,lastBalanceWad,emissionMultiple]       
     SQRT()                     // [ sqrt(1e18 * emissionMultiple * lastBalanceWad), timeElapsedWad,lastBalanceWad,emissionMultiple]         
     
     WAD_MUL()                  // [ sqrt(1e18 * emissionMultiple * lastBalanceWad) * timeElapsedWad,lastBalanceWad,emissionMultiple]           
     0x00 mload                 // [ lastBalanceWad + (emissionMultiple * timeElapsedWadSquared >> 2), sqrt(1e18 * emissionMultiple * lastBalanceWad) * timeElapsedWad,lastBalanceWad,emissionMultiple]             
     add                        // [ lastBalanceWad + (emissionMultiple * timeElapsedWadSquared >> 2) + sqrt(1e18 * emissionMultiple * lastBalanceWad) * timeElapsedWad,lastBalanceWad,emissionMultiple]               

    0x00 mstore                 // [lastBalanceWad,emissionMultiple] 
    0x20 0x00 return
}

/* Function Dispatcher */
#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called.
    0x00 calldataload 
    
    // Extract the function signature
    0xe0 shr

    // Jump table
    dup1 __FUNC_SIG(computeGooBalance) eq  compute_goo_balance jumpi
 

    compute_goo_balance:
    COMPUTE_GOO_BALANCE()
}